FINALS 
SCOPE
SERVER-SIDE WEB SCRIPTING
Server-side scripts are technique used by back-end web developers for web development which uses scripts on the web server side and make responses to client’s side depending on the request to the web server on the website. These scripts can be written in different server-side programming languages, such as PHP, Python, C#, C++, Java and Erlang.  These languages are used for the communication of the server, client and database. 
	Server-side scripting is used in many ways such as: for customizing interface for the client; hide source codes; Facilitates the transferring of data into the browser; controls on what to share on applications. 

•	JAVA (SERVLET AND JSP)
•	PHP
•	Node.js
•	ASP.NET (if there’s still time)

Java Programming Language Platforms:
Java Platform, Standard Edition (Java SE)
Java Platform, Micro Edition (Java ME)
Java Platform, Enterprise Edition (Java EE)
•	It used in larger scale
•	Used in Development of Server
•	Used for Java Web

Java EE versions:
Java EE 7 Web
Java EE 6 Web
Java EE 8 Web


Web server/ Application Server:
Java Web Application
In Netbeans in creating a web services you can either 
•	Apache Tomcat  8.0.27.0
•	Glassfish server 4.1.1

	Web Pages (folder)
•	META-INF
•	WEB-INF
•	images



Servlet
- Serving Binary Content
- Handling Request Parameters (GET)
- Request Dispatching

Java Servlet - JSP

@WebServelet container
@WebServlet(name = “Hello Servlet”, urlPatterns = (“/HelloServlet”)

	getInputStream() – Servlet Input Stream
	getOutputStream() - Servlet Output Stream

@Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException { }

Portimage = request.getPart(“image”) – get the name

Request Dispatching
•	God Class – a class that does a lot of things
•	Long Method – 
•	Divide & Conquer

set/ get Atribute

request.setAttribute(“productlist”, productList);
request.setAttribute(“productlist”);

	include component – either can be static, or dynamic
Session Handling
- “Stateless Http”
- extending Features : Cookies
-State of correlated transaction

Extended Features
Cookies 
	–small textual information, generated from the web application
	- stored by the client in the browser (Cookie Jar)
	- identifier
      set.cookie.ck1
	- non-persistent cookies
		(as long as the browser is open)
	- can set the time
	- can set by HTTPS
		HTTP – only can be access by javascript
     Scoped objects
	- context scopes

PHP
- does have many framework
- striplets to JSP
- there is a PHP API on Web services
- Switch in and out blocks in PHP
-Object-Oriented (close with Java)

echo- PHP print statement
Array – is an associative structured
<form action = “x.php” method = GET>
	<input type = “text” name = “user”
	<input type = “submit”>
</form>

isset function 
	isset ($_GET[‘user’]
Variable – SUPERGLOBALS:
$GLOBALS 
$_SERVER
$_GET
$_POST
$_FILES
$_COOKIE
$_SESSION
$_REQUEST
$_ENV

Example:
<?php fpreach ($_SERVER as $Key = $values) {
	echo “<p> $key = $ values </p>”;
	} ?>

HTTP Request Headers
HTTP_HOST = Localhost
HTTP_CONNECTION = Keep-alive
HTTP_CACHE_CONTROL =max-age = 0
HTTP_UPGRADE_INSECURE_ReQUESTS = 2
HTTP_USER_AGENT= Mozilla/5.0
HTTP_ACCEPT
HTTP_OUT
REMOTE_PORT = 50625
GATEWAY_INTERFACE = CGI 1.1
SERVER_PROTOCOL = HTTP 11.1
REQUEST_METHOD_GET
QUERY_STRING=
REQUEST_URI =
SCRIPT_NAME
PHP_SELF

NODE.JS Serverside

MEAN
M – Monggo DB
E – Express JS
A – Angular framework
N – Node.JS

BJON – Binary JSON Format

API Node.JS Features
index.js(simple webserver)
var http require (‘http’)
var server = http.createServer();
server.on(‘request handler’);

function handle(request, response) {
	response end(hello, nodeJs!!);
}

function handler (request, response) {
	var method = request.method;
	var url = request.url;
	var headers = request.headers;

	console.log(‘Request Method: ${method}’);
	console.log(‘Request URL: ${url}’);
	console.log(‘Request Headers: \n ${JSON.String}’);

•	asynchronous handler – callback handler
•	synchronous handler


SECURITY

OWASP Top Ten Project
	Top Ten Security Vulnerability in the Web.
(2017)
1.	Injection
2.	Broken Authentication and Session Management
3.	Cross-Site Scripting (XSS)
4.	Broken Access Control 
5.	Security Misconfiguration
6.	Sensitive Data Exposure
7.	Insufficient Attack Protection (IAP)
8.	Cross-site Request Forgery (CSRF)
9.	Using components with known vulnerabilities
10.	Under protected API

Digital Certificate 
	- encrypting of the Website
letsencrypt.org – website for free Digital certificate

HASH Algorithm
 - function
- One-way function
-intractable

ex. 
MD5
SHA1
SHA2

_SALTED 
	(‘pwd’ + salt) = HASH
	







src:
https://www.upwork.com/hiring/development/server-side-scripting-back-end-web-development-technology/

